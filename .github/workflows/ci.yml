name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Build workspace
        run: cargo build --workspace --verbose

      - name: Run tests
        run: cargo test --workspace --verbose

      - name: Run doc tests
        run: cargo test --workspace --doc

  check:
    name: Security and Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run security audit
        run: cargo audit

      - name: Check licenses and bans
        run: cargo deny check

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1 || true
        continue-on-error: true

  minimal-versions:
    name: Test Minimal Versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install nightly (for -Z minimal-versions)
        uses: dtolnay/rust-toolchain@nightly

      - name: Test with minimal versions
        run: |
          cargo +nightly update -Z minimal-versions
          cargo test --workspace

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --workspace --out Xml --timeout 300

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build release
        run: cargo build --workspace --release --verbose

      - name: Run release tests
        run: cargo test --workspace --release

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [test, check, build-release]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "### CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Test Suite: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Check: ${{ needs.check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release Build: ${{ needs.build-release.result }}" >> $GITHUB_STEP_SUMMARY
